"""
Hayvan API Sistemi
=================

Bu mod√ºl hayvan fotoƒüraf ve bilgi API'lerini y√∂netir.
K√∂pek, kedi, tilki, √∂rdek i√ßin fotoƒüraf ve bilgi isteklerini i≈üler.
"""

import httpx
import re
import html
from typing import Dict, Any

# G√ºvenlik sabitleri
MAX_ANIMAL_MESSAGE_LENGTH = 500
DANGEROUS_ANIMAL_PATTERNS = [
    r'<script[^>]*>.*?</script>',
    r'javascript:',
    r'data:text/html',
    r'vbscript:',
    r'on\w+\s*=',
    r'<iframe[^>]*>',
    r'<object[^>]*>',
    r'<embed[^>]*>',
]

ANIMAL_FUNCTIONS_SPEC = [
    {
        "name": "dog_photo",
        "description": "Rastgele bir k√∂pek fotoƒürafƒ± d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
    {
        "name": "dog_facts",
        "description": "Rastgele bir k√∂pek bilgisi d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
    {
        "name": "cat_facts",
        "description": "Rastgele bir kedi bilgisi d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
    {
        "name": "cat_photo",
        "description": "Rastgele bir kedi fotoƒürafƒ± d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
    {
        "name": "fox_photo",
        "description": "Rastgele bir tilki fotoƒürafƒ± d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
    {
        "name": "duck_photo",
        "description": "Rastgele bir √∂rdek fotoƒürafƒ± d√∂nd√ºr",
        "parameters": {"type": "object", "properties": {}, "required": []},
    },
]

ANIMAL_SYSTEM_PROMPT = (
    "Kullanƒ±cƒ±nƒ±n niyetini tespit et ve sadece a√ßƒ±k HAYVAN isteƒüi varsa uygun hayvan fonksiyonunu √ßaƒüƒ±r. "
    "Se√ßenekler: dog_photo, dog_facts, cat_facts, cat_photo, fox_photo, duck_photo. "
    "Mesajda 'k√∂pek/dog', 'kedi/cat', 'tilki/fox', '√∂rdek/duck' anahtar kelimeleri YOKSA kesinlikle fonksiyon √ßaƒüƒ±rma. "
    "PDF, ders, kitap, teori, Python, Anayasa, Clean Architecture gibi bilgi taleplerinde fonksiyon √ßaƒüƒ±rma. "
    "Net hayvan isteƒüi yoksa FONKSƒ∞YON √áAƒûIRMA ve normal akƒ±≈üa bƒ±rak."
)


def _sanitize_animal_input(text: str) -> str:
    """Hayvan sistemi i√ßin g√ºvenli input sanitization"""
    if not text:
        return ""
    
    # HTML escape
    text = html.escape(text, quote=True)
    
    # Tehlikeli pattern'leri kontrol et
    for pattern in DANGEROUS_ANIMAL_PATTERNS:
        if re.search(pattern, text, re.IGNORECASE):
            print(f"[SECURITY] Hayvan sisteminde tehlikeli pattern: {pattern}")
            return "[G√ºvenlik nedeniyle mesaj filtrelendi]"
    
    # Fazla bo≈üluklarƒ± temizle
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def _validate_animal_message_length(text: str) -> bool:
    """Hayvan mesajƒ± uzunluk kontrol√º"""
    return len(text) <= MAX_ANIMAL_MESSAGE_LENGTH

def _http_get_json(url: str) -> dict:
    """HTTP GET isteƒüi yapar ve JSON d√∂nd√ºr√ºr"""
    with httpx.Client(timeout=15.0, follow_redirects=True) as s:
        r = s.get(url)
        r.raise_for_status()
        return r.json()


def _animal_emoji(animal: str) -> str:
    """Hayvan t√ºr√ºne g√∂re emoji d√∂nd√ºr√ºr"""
    mapping = {
        "dog": "üê∂",
        "cat": "üê±",
        "fox": "ü¶ä",
        "duck": "ü¶Ü",
    }
    return mapping.get(animal, "üôÇ")


def _is_image_url(url: str) -> bool:
    """URL'nin resim dosyasƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol eder"""
    if not url:
        return False
    url_l = url.lower()
    for ext in (".jpg", ".jpeg", ".png", ".gif", ".webp"):
        if url_l.endswith(ext):
            return True
    return False


def dog_photo() -> dict:
    """K√∂pek fotoƒürafƒ± getirir"""
    # random.dog zaman zaman video d√∂nd√ºrd√ºƒü√º i√ßin birka√ß deneme yap
    image_url = ""
    for _ in range(6):
        data = _http_get_json("https://random.dog/woof.json")
        candidate = str(data.get("url", "")).strip()
        if _is_image_url(candidate):
            image_url = candidate
            break
    # Son √ßare: image deƒüilse yine candidate'i d√∂nd√ºrme; yardƒ±m mesajƒ± ver
    if not image_url:
        # Alternatif statik bir k√∂pek resmi verilebilir; burada metin d√∂nd√ºrelim
        return {"type": "text", "animal": "dog", "text": "≈ûu an uygun k√∂pek fotoƒürafƒ± bulunamadƒ±, tekrar dener misin?"}
    return {"type": "image", "animal": "dog", "image_url": image_url}


def dog_facts() -> dict:
    """K√∂pek bilgisi getirir"""
    data = _http_get_json("https://dogapi.dog/api/v2/facts?limit=1")
    fact = ""
    try:
        arr = data.get("data") or []
        if arr and isinstance(arr, list):
            attributes = (arr[0] or {}).get("attributes", {})
            fact = str(attributes.get("body", "")).strip()
    except Exception:
        fact = ""
    return {"type": "text", "animal": "dog", "text": fact}


def cat_facts() -> dict:
    """Kedi bilgisi getirir"""
    data = _http_get_json("https://meowfacts.herokuapp.com/")
    fact = ""
    try:
        arr = data.get("data") or []
        if arr and isinstance(arr, list):
            fact = str(arr[0]).strip()
    except Exception:
        fact = ""
    return {"type": "text", "animal": "cat", "text": fact}


def cat_photo() -> dict:
    """Kedi fotoƒürafƒ± getirir"""
    data = _http_get_json("https://api.thecatapi.com/v1/images/search")
    url = ""
    try:
        if isinstance(data, list) and data:
            url = str((data[0] or {}).get("url", "")).strip()
    except Exception:
        url = ""
    return {"type": "image", "animal": "cat", "image_url": url}


def fox_photo() -> dict:
    """Tilki fotoƒürafƒ± getirir"""
    data = _http_get_json("https://randomfox.ca/floof/")
    return {"type": "image", "animal": "fox", "image_url": str(data.get("image", "")).strip()}


def duck_photo() -> dict:
    """√ñrdek fotoƒürafƒ± getirir"""
    data = _http_get_json("https://random-d.uk/api/v2/random")
    return {"type": "image", "animal": "duck", "image_url": str(data.get("url", "")).strip()}


def _animal_keyword_router(text: str) -> dict | None:
    """Anahtar kelime tabanlƒ± hayvan y√∂nlendirmesi (fallback)"""
    t = text.lower()
    if ("k√∂pek" in t or "dog" in t) and ("foto" in t or "resim" in t or "image" in t or "photo" in t):
        return dog_photo()
    if ("k√∂pek" in t or "dog" in t) and ("fact" in t or "bilgi" in t):
        return dog_facts()
    if ("kedi" in t or "cat" in t) and ("fact" in t or "bilgi" in t):
        return cat_facts()
    if ("kedi" in t or "cat" in t) and ("foto" in t or "resim" in t or "image" in t or "photo" in t):
        return cat_photo()
    if ("tilki" in t or "fox" in t) and ("foto" in t or "resim" in t or "image" in t or "photo" in t):
        return fox_photo()
    if ("√∂rdek" in t or "duck" in t) and ("foto" in t or "resim" in t or "image" in t or "photo" in t):
        return duck_photo()
    return None


def route_animals(user_message: str, client) -> dict | None:
    """Ana hayvan y√∂nlendirme fonksiyonu - function calling + fallback"""
    # G√ºvenlik kontrolleri
    if not user_message:
        return None
    
    # Mesaj uzunluk kontrol√º
    if not _validate_animal_message_length(user_message):
        return {"type": "text", "animal": "error", "text": f"Mesaj √ßok uzun. Maksimum {MAX_ANIMAL_MESSAGE_LENGTH} karakter olabilir."}
    
    # Input sanitization
    user_message = _sanitize_animal_input(user_message)
    if user_message == "[G√ºvenlik nedeniyle mesaj filtrelendi]":
        return {"type": "text", "animal": "error", "text": "G√ºvenlik nedeniyle mesaj filtrelendi"}
    
    # √ñn filtre: mesajda hayvan anahtar kelimesi yoksa hi√ß deneme
    tl = user_message.lower()
    if not ("k√∂pek" in tl or "dog" in tl or "kedi" in tl or "cat" in tl or "tilki" in tl or "fox" in tl or "√∂rdek" in tl or "duck" in tl):
        return None
    # OpenAI modeli ile fonksiyon √ßaƒüƒ±rma dene; olmazsa anahtar kelimeye d√º≈ü
    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": ANIMAL_SYSTEM_PROMPT},
                {"role": "user", "content": user_message},
            ],
            functions=ANIMAL_FUNCTIONS_SPEC,
            function_call="auto",
            temperature=0.0,
        )
        msg = completion.choices[0].message
        fn_name = getattr(getattr(msg, "function_call", None), "name", None)
        if not fn_name:
            return None
        mapping = {
            "dog_photo": dog_photo,
            "dog_facts": dog_facts,
            "cat_facts": cat_facts,
            "cat_photo": cat_photo,
            "fox_photo": fox_photo,
            "duck_photo": duck_photo,
        }
        func = mapping.get(fn_name)
        return func() if func else None
    except Exception:
        return _animal_keyword_router(user_message)
